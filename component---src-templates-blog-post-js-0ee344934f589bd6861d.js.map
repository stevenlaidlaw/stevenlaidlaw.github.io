{"version":3,"file":"component---src-templates-blog-post-js-0ee344934f589bd6861d.js","mappings":"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","sources":["webpack://blog/./src/hooks/useTheme.js","webpack://blog/./src/components/layout.js","webpack://blog/./gatsby-config.js","webpack://blog/./src/templates/blog-post.js","webpack://blog/./src/components/seo.js"],"sourcesContent":["import { useState, useEffect } from \"react\"\n\nexport const useTheme = () => {\n  const [theme, setTheme] = useState(\"light\")\n\n  useEffect(() => {\n    // Get initial theme from localStorage if it exists\n    const savedTheme = localStorage.getItem(\"theme\")\n    if (savedTheme) {\n      setTheme(savedTheme)\n      document.documentElement.setAttribute(\"data-theme\", savedTheme)\n    }\n  }, [])\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\"\n    setTheme(newTheme)\n    localStorage.setItem(\"theme\", newTheme)\n    document.documentElement.setAttribute(\"data-theme\", newTheme)\n  }\n\n  return { theme, toggleTheme }\n}\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport { siteMetadata } from \"../../gatsby-config\"\nimport { useTheme } from \"../hooks/useTheme\"\n\nconst { title, description } = siteMetadata\n\nconst Layout = ({ children }) => {\n  const { theme, toggleTheme } = useTheme()\n  const isDark = theme === \"dark\"\n\n  return (\n    <div className=\"global-wrapper\">\n      <div class=\"theme-toggle\">\n        <div class=\"theme-toggle-label\">\n          {isDark ? \"how can you see anything?\" : \"the light burns me!\"}\n        </div>\n        <label class=\"switch\" aria-label=\"toggle theme\">\n          <input type=\"checkbox\" onClick={toggleTheme} checked={isDark} />\n          <span class=\"slider\"></span>\n        </label>\n      </div>\n\n      <header className=\"global-header\">\n        <h1 className=\"main-heading\">\n          <Link to=\"/\">{title}</Link>\n        </h1>\n        <div>{description}</div>\n        <div>\n          <a href=\"https://github.com/stevenlaidlaw\">github</a>\n          {\" // \"}\n          <a href=\"https://www.linkedin.com/in/stevenglaidlaw/\">linkedin</a>\n        </div>\n      </header>\n      <main>{children}</main>\n      <footer></footer>\n    </div>\n  )\n}\n\nexport default Layout\n","const author = `Steven Laidlaw`\n/**\n * @type {import('gatsby').GatsbyConfig}\n */\nmodule.exports = {\n  siteMetadata: {\n    title: `devoid of context`,\n    author,\n    description: `the unfiltered ramblings of software engineer ${author}`,\n    siteUrl: `https://stevenlaidlaw.com`,\n  },\n  plugins: [\n    `gatsby-plugin-image`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `${__dirname}/articles`,\n        name: `blog`,\n      },\n    },\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: `${__dirname}/src/images`,\n      },\n    },\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          {\n            resolve: `gatsby-remark-images`,\n            options: {\n              maxWidth: 630,\n            },\n          },\n          {\n            resolve: `gatsby-remark-responsive-iframe`,\n            options: {\n              wrapperStyle: `margin-bottom: 1.0725rem`,\n            },\n          },\n          `gatsby-remark-prismjs`,\n        ],\n      },\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-sharp`,\n    {\n      resolve: `gatsby-plugin-feed`,\n      options: {\n        query: `\n          {\n            site {\n              siteMetadata {\n                title\n                description\n                siteUrl\n                site_url: siteUrl\n              }\n            }\n          }\n        `,\n        feeds: [\n          {\n            serialize: ({ query: { site, allMarkdownRemark } }) =>\n              allMarkdownRemark.nodes.map(node =>\n                Object.assign({}, node.frontmatter, {\n                  description: node.excerpt,\n                  date: node.frontmatter.date,\n                  url: site.siteMetadata.siteUrl + node.fields.slug,\n                  guid: site.siteMetadata.siteUrl + node.fields.slug,\n                  custom_elements: [{ \"content:encoded\": node.html }],\n                })\n              ),\n            query: `{\n              allMarkdownRemark(sort: {frontmatter: {date: DESC}}) {\n                nodes {\n                  excerpt\n                  html\n                  fields {\n                    slug\n                  }\n                  frontmatter {\n                    title\n                    date\n                  }\n                }\n              }\n            }`,\n            output: \"/rss.xml\",\n            title: \"devoid of context - rss feed\",\n          },\n        ],\n      },\n    },\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `devoid of context`,\n        short_name: `devoid of context`,\n        start_url: `/`,\n        background_color: `#ffffff`,\n        display: `minimal-ui`,\n        icon: `src/images/logo.svg`, // This path is relative to the root of the site.\n      },\n    },\n  ],\n}\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ‚Üê {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} ‚Üí\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["title","description","siteMetadata","_ref","children","theme","toggleTheme","useTheme","setTheme","useState","useEffect","savedTheme","localStorage","getItem","document","documentElement","setAttribute","newTheme","setItem","isDark","React","className","class","type","onClick","checked","Link","to","href","author","module","exports","siteUrl","plugins","resolve","options","path","name","maxWidth","wrapperStyle","query","feeds","serialize","site","allMarkdownRemark","nodes","map","node","Object","assign","frontmatter","excerpt","date","url","fields","slug","guid","custom_elements","html","output","short_name","start_url","background_color","display","icon","Head","_ref2","data","markdownRemark","post","Seo","_site$siteMetadata","previous","next","location","siteTitle","Layout","itemScope","itemType","itemProp","dangerouslySetInnerHTML","__html","style","flexWrap","justifyContent","listStyle","padding","rel","useStaticQuery","metaDescription","defaultTitle","content","property"],"sourceRoot":""}