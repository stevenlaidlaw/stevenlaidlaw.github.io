{"data":{"site":{"siteMetadata":{"title":"Steven Laidlaw","author":"Steven Laidlaw"}},"markdownRemark":{"id":"99672d31-587a-5d3c-9eab-aab7cda54084","excerpt":"Learning new stuff is hard, so today I’m going to guide you through using Docker by over-engineering the hell out of Todo app. We will build a three-tier…","html":"<p>Learning new stuff is hard, so today I’m going to guide you through using Docker by over-engineering the hell out of Todo app. We will build a three-tier, RESTful web app running multiple containers. You know, like a normal person would.</p>\n<blockquote>\n<p><strong>Disclaimer:</strong> All the commands here will assume you’re running Linux. If you’re not, then substitute the commands for your OS.</p>\n</blockquote>\n<h2>The Specification</h2>\n<p>First we need to lay out the spec to make sure we know what we’re building. For a standard three-tier app we’d need three separate containers that spoke to each other: the DB, the server, and the app.</p>\n<p>For these I chose to use Postgres, Express, and React, respectively, but those technologies aren’t the point of this article and can be replaced with anything you need. I’ll include some of that code just so you understand what is going on, but won’t go deep into detail on them.</p>\n<p>The complete code is available in a link to my GitHub at the end of the article, so if you’re interested in that part (or making fun of me for bad code) then feel free to peruse.</p>\n<p>In any case, here is the basic spec I came up with:</p>\n<ol>\n<li>Database container automatically initialise with relevant structure.</li>\n<li>\n<p>Express server with the following RESTful endpoints:</p>\n<ol>\n<li>GET /todo - List all todos</li>\n<li>POST /todo - Insert a new todo</li>\n<li>PATCH /todo/:id - Update the relevant todo</li>\n</ol>\n</li>\n<li>React app that consumes the endpoints to update the database.</li>\n</ol>\n<p>So it’s a weak spec. I’m not a Product Manager, sue me, but it serves our purpose.</p>\n<blockquote>\n<p><strong>Note:</strong> You might notice there is no DELETE endpoint. This is deliberate, as it’s be drilled into me never to delete user data. Instead we will flag items as deleted in the database.</p>\n</blockquote>\n<p>So let’s create our directory structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">mkdir -p overengineeredTodo/{app,db,server} &amp;&amp; cd overengineeredTodo</code></pre></div>\n<h2>The Database Container</h2>\n<p>First we need to create the database which will persist our Todos. This is one of the simplest parts of Docker as containers for all your standard databases already exist. Whatever you’re familiar with there is very likely to be a container for you. As I’m using Postgres we just need two files:</p>\n<ol>\n<li>The Dockerfile</li>\n<li>The DB init SQL file</li>\n</ol>\n<p>Let’s create them:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> Dockerfile todo-init.sql</code></pre></div>\n<p>The <code class=\"language-text\">Dockerfile</code> file is what tells Docker what you want it to do and thanks to the pre-existing containers are really simple to use. Open it up in your editor of choice and enter the following line:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> postgres<span class=\"token punctuation\">:</span>9.5\n<span class=\"token keyword\">ENV</span> POSTGRES_DB tododb\n<span class=\"token keyword\">COPY</span> todo<span class=\"token punctuation\">-</span>init.sql /docker<span class=\"token punctuation\">-</span>entrypoint<span class=\"token punctuation\">-</span>initdb.d/</code></pre></div>\n<p>Boom. That’s it. Using just that first line you can have a running, containerised instance of Postgres 9.5 running on your machine. The second is an optional environment variable to rename the database from the default. I’ve called it <code class=\"language-text\">tododb</code>, but you can call it whatever you want. The third is a bit of Postgres specific magic that will allow us to run some SQL when the container is first initialised. Any files (you can have multiple) that are copied over to <code class=\"language-text\">/docker-entrypoint-initdb.d/</code> will be run automatically.</p>\n<p>Of course now we need to fill that file with data, so let’s open up <code class=\"language-text\">todo-init.sql</code> and enter our database structure inside:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">create table todo (\n\tid serial primary key,\n\tlabel varchar(256),\n\tcomplete boolean default false,\n\tdeleted boolean default false,\n\tupdated_date timestamp default current_timestamp\n);</code></pre></div>\n<p>Here we’re setting an id, a label, two flags for whether the todo is complete or deleted, and a timestamp for when the item was last updated. That’s really all we need to do for the database.</p>\n<h2>The Server Container</h2>\n<p>We won’t go into full detail on the server as it’s all specific to Express and Postgres, but you can view the relevant files in my <a href=\"https://github.com/stevenlaidlaw/OverengineeredTodo/blob/master/server/server.js\">GitHub, here</a>. There are just some things to take note of relating to Docker that I’d like to call attention to:</p>\n<ol>\n<li>Hard-coded DB<em>HOST and DB</em>PORT variables. This is a bad way to do things. Use environment variables instead.</li>\n<li>CORS. We have to make sure to use CORS, as the separate containers are cross-origin.</li>\n</ol>\n<p>Now run the commands to create the package.json file and install the required dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm init &amp;&amp; npm i -S express body-parser cors pg-promise</code></pre></div>\n<p>We also want to modify the scripts in package.json to allow the container to run it:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n\t...\n\t&quot;scripts&quot;: {\n\t\t&quot;start&quot;: &quot;node server.js&quot;\n\t}\n\t...\n}</code></pre></div>\n<p>Once this is set up you can go ahead and create another <code class=\"language-text\">Dockerfile</code> file in the <code class=\"language-text\">server</code> directory. We’ll go through this one a few lines at a time as it’s the most complex of the three.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM node:8\nWORKDIR /usr/src/app</code></pre></div>\n<p>First we set the base container to be node 8 so that we can run the express server and set the working directory to <code class=\"language-text\">/usr/src/app</code>. This will determine where all the files we copy from this point on end up in the container’s filesystem.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">COPY package*.json ./\nRUN npm install</code></pre></div>\n<p>Now we copy over the package files and install the relevant dependencies. We include the wildcard to make sure we transfer over the <code class=\"language-text\">package-lock.json</code> file too.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CMD [ &quot;npm&quot;, &quot;start&quot; ]\nCOPY server.js ./</code></pre></div>\n<p>Now we copy over the actual server file, and then run it!</p>\n<p>=======</p>\n<ol>\n<li>Intro</li>\n<li>Spec\na. Three teir\nb. Restful</li>\n<li>Implementation\na. Postgres\nb. Server\nc. App</li>\n<li>Dockerization</li>\n<li>Conclusion</li>\n</ol>","frontmatter":{"title":"Learn Docker via an Over-engineered Todo","date":"April 29, 2019"}}},"pageContext":{"slug":"/overengineered-todo/","previous":{"fields":{"slug":"/perixi-latest/"},"frontmatter":{"title":"Perixi"}},"next":null}}