# Email-based passwordless authentication with Express and PostgreSQL

This tutorial will guide you through the required steps necessary to implement your very own passwordless auth using Express and Postgres. The first section will be a short detail of the philosophy behind passwordless auth and why you should consider it, so feel free to skip those and jump right into the how-to if you're already sold.

#### DISCLAIMER

The application in this tutorial was built to run on Linux like 96.3% of the worlds servers, and will require a working familiarity with unix commands and the command line.

It should run perfectly well on Mac natively and Windows (via WSL), but as it's not been tested there I can't guarantee it will run out of the box. In both cases any modifications required should hopefully be minor.

## The concept

From Wikipedia:

> Passwordless authentication is an authentication method in which a user can log in to a computer system without the entering (and having to remember) a password or any other knowledge-based secret.

This means that a user will use a secondary, intrinsically safer, authentication device as opposed to having to remember a password. Many websites already implement this secondary control with multi-factor authentication (MFA) which you're likely already familiar with. Typically a code will be sent to your email address, phone, hardware device, or a software app you've configured to manage your auth codes.	

So why should you use passwordless auth? Isn't it more secure to _also_ use a password in addition to MFA?

Passwords are well known to be the weakest part of the authentication chain due to various factors like complexity, reuse, cracking, etc. This makes passwords the largest factor in security breaches. With this in mind you don't lose much in terms of security by removing passwords, but you gain a lot in terms of engineering overhead for both development and security teams, and less cognitive load for the user.

## The overview

For this article we'll be implementing the most simple of the methods -- a one-time password (OTP) sent via email. This was chosen to both simplicity, availability, and cost. Almost every user will have an email, and there is very minimal cost in sending them compared with something like SMS. An OTP is used here over a link also for user convenience. It allows them to retrieve the code on one device (like a phone) and log into your service on another (like a public computer). This saves the user the hassle of logging into their email somewhere they might not want to.

As a high-level overview the implementation will be as follows:

- A user registers an account using their email address and a desired username
- The user attempts to log in using their email address
- The site retrieves the user information and generates a OTP
- The OTP is stored securely in the database, and sent via plain text to the user
- The user will then retrieve the code and enter it into the login field provided
- The OTP is verified against the database
- If successful, the user is logged into the application 
- The OTP is then deleted from the database to prevent re-use

This flow is flexible and can be implemented using any technology you are familiar with. For the purposes of this tutorial we will use the Express web server on NodeJS to serve the website, and PostgreSQL as our data store for user information and OTPs.

## The implementation

### Setup

First of all you'll need both NodeJS and PostgreSQL installed locally. I'll leave this as an exercise for the reader due to the volume of distributions available, but a good place to start would be [NVM](https://github.com/nvm-sh/nvm) for managing NodeJS, and the [PostgreSQL website](https://www.postgresql.org/download/).

### Initialisation

First of all we will scaffold our application using Express's own [application generator](https://expressjs.com/en/starter/generator.html). I have chosen to use handlebars templates due to simplicity and familiarity, but feel free to use anything you wish from the available view engines.

```sh
npx express-generator --view hbs example-application
cd example-application
```

You should now 

## How do I implement it myself?

1. Preamble (Why passwordless?)
2. Setting up your node environment
3. Setting up postgres
4. Creating basic templates
5. Register user
6. Login user
7. Generate and store (securely) OTP
8. Email user the OTP
9. Validate the OTP against the user
10. Generate a token and store it in the users cookies
11. User is logged in