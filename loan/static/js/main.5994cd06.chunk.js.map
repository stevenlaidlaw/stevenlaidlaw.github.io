{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","FREQUENCY","WEEKLY","FORTNIGHTLY","MONTHLY","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateAmount","e","setState","amount","Number","target","value","updateInterest","interest","updateFrequency","frequency","updateRepayments","repayments","updateExtra","extra","state","_this$state","monthlyRepayments","monthlyExtra","monthlyInterest","baseTotalPaid","baseInterestPaid","baseMonths","totalPaid","interestPaid","months","totalAmount","interestAmt","counter","rows","push","react_default","a","createElement","className","toFixed","onChange","undefined","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5994cd06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst FREQUENCY = {\n  WEEKLY: 'Weekly',\n  FORTNIGHTLY: 'Fortnightly',\n  MONTHLY: 'Monthly'\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      amount: 0,\n      interest: 0,\n      repayments: 0,\n      extra: 0,\n      frequency: FREQUENCY.MONTHLY\n    };\n  }\n\n  updateAmount = e => this.setState({amount: Number(e.target.value)});\n  updateInterest = e => this.setState({interest: Number(e.target.value)});\n  updateFrequency = e => this.setState({frequency: e.target.value});\n  updateRepayments = e => this.setState({repayments: Number(e.target.value)});\n  updateExtra = e => this.setState({extra: Number(e.target.value)});\n\n  render() {\n    const {amount, interest, repayments, extra, frequency} = this.state;\n\n    const monthlyRepayments = frequency === FREQUENCY.MONTHLY ? repayments : frequency === FREQUENCY.FORTNIGHTLY ? repayments * 26 / 12 : repayments * 52 / 12;\n    const monthlyExtra = frequency === FREQUENCY.MONTHLY ? extra : frequency === FREQUENCY.FORTNIGHTLY ? extra * 26 / 12 : extra * 52 / 12;\n    const monthlyInterest = interest / 100 / 12;\n\n    let baseTotalPaid = 0;\n    let baseInterestPaid = 0;\n    let baseMonths = 1;\n    let totalPaid = 0;\n    let interestPaid = 0;\n    let months = 1;\n\n    // First work out the base\n    let totalAmount = amount;\n\n    if (monthlyRepayments > 100) {\n      while (totalAmount > monthlyRepayments) {\n        baseMonths++;\n        totalAmount -= monthlyRepayments;\n        const interestAmt = totalAmount * monthlyInterest;\n        totalAmount += interestAmt;\n\n        baseTotalPaid += monthlyRepayments;\n        baseInterestPaid += interestAmt;\n      }\n      // Add the last little bit to pay off\n      baseTotalPaid += totalAmount;\n    }\n\n    // Now work out the real values\n    totalAmount = amount;\n\n    let counter = 0;\n    const rows = [];\n\n    if (monthlyRepayments > 100) {\n      while (totalAmount > monthlyRepayments + monthlyExtra) {\n        counter++;\n        months++;\n        // 1. Remove the repayment\n        totalAmount -= (monthlyRepayments + monthlyExtra);\n        // 2. Calculate and add the interest\n        const interestAmt = totalAmount * monthlyInterest;\n        totalAmount += interestAmt;\n        // 3. Add the values to the total paid\n        totalPaid += monthlyRepayments + monthlyExtra;\n        interestPaid += interestAmt;\n        // 4. Build the row\n        rows.push(<tr>\n          <td className=\"month\">{counter}</td>\n          <td className=\"remaining\">{totalAmount.toFixed(2)}</td>\n          <td className=\"paid\">{(monthlyRepayments + monthlyExtra).toFixed(2)}</td>\n          <td className=\"interest\">{interestAmt.toFixed(2)}</td>\n        </tr>);\n      }\n      // Add the last little bit to pay off\n      totalPaid += totalAmount;\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"meta\">\n          <div className=\"row\">\n            <label>Loan Amount</label>\n            <input value={amount} onChange={this.updateAmount}/>\n          </div>\n          <div className=\"row\">\n            <label>Interest (%)</label>\n            <input value={interest} onChange={this.updateInterest}/>\n          </div>\n          <div className=\"row\">\n            <label>Repayment Frequency</label>\n            <select value={frequency} onChange={this.updateFrequency}>\n              <option value={FREQUENCY.MONTHLY}>{FREQUENCY.MONTHLY}</option>\n              <option value={FREQUENCY.FORTNIGHTLY}>{FREQUENCY.FORTNIGHTLY}</option>\n              <option value={FREQUENCY.WEEKLY}>{FREQUENCY.WEEKLY}</option>\n            </select>\n          </div>\n          <div className=\"row\">\n            <label>Repayments</label>\n            <input value={repayments} onChange={this.updateRepayments}/>\n          </div>\n          <div className=\"row\">\n            <label>Extra Repayments</label>\n            <input value={extra} onChange={this.updateExtra}/>\n          </div>\n        </header>\n        <div className=\"data\">\n          <table className=\"results\">\n            <tbody>\n              <tr>\n                <td></td>\n                <td>Total</td>\n                <td>Interest</td>\n                <td>Months</td>\n              </tr>\n              <tr>\n                <td>Original</td>\n                <td>{baseTotalPaid.toFixed(2)}</td>\n                <td>{baseInterestPaid.toFixed(2)}</td>\n                <td>{baseMonths}</td>\n              </tr>\n              <tr>\n                <td>With Extra</td>\n                <td>{totalPaid.toFixed(2)}</td>\n                <td>{interestPaid.toFixed(2)}</td>\n                <td>{months}</td>\n              </tr>\n            </tbody>\n          </table>\n          {(baseInterestPaid - interestPaid) > 0 ? <h1>You will save <span>${(baseInterestPaid - interestPaid).toFixed(2)}</span> and <span>{baseMonths - months}</span> months!</h1> : undefined}\n        </div>\n        <div className=\"main\">\n          <h3>Repayments Table</h3>\n          <table className=\"results\">\n            <thead>\n              <tr>\n                <th>Month</th>\n                <th>Total Remaining</th>\n                <th>Total Paid</th>\n                <th>Interest accrued</th>\n              </tr>\n            </thead>\n            <tbody>\n              {rows}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}